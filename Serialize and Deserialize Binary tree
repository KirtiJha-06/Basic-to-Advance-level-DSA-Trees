TC: O(N)
SC: O(N)

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        if (!root) return "";  
        /* If the tree is empty, return an empty string. */

        string s = "";
        queue<TreeNode*> q;
        q.push(root);
        /* Use a queue for level-order traversal. Start with the root node. */

        while (!q.empty()) {
            TreeNode* currNode = q.front();
            q.pop();
            /* Process the front node of the queue. */

            if (currNode == NULL) 
                s.append("#,");  
                /* If the node is NULL, append "#" to indicate null and separate with a comma. */
            else 
                s.append(to_string(currNode->val) + ',');
                /* If it's a valid node, append its value followed by a comma. */

            if (currNode != NULL) {
                q.push(currNode->left);
                q.push(currNode->right);
                /* Push the left and right children into the queue for processing. */
            }
        }
        return s;  
        /* Return the serialized string. */
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if (data.empty()) return NULL;
        /* If the input string is empty, return NULL (empty tree). */

        stringstream s(data);
        string str;
        
        if (!getline(s, str, ',')) return NULL;  
        /* Read the first node value from the stream. If it's empty, return NULL. */

        TreeNode* root = new TreeNode(stoi(str));
        queue<TreeNode*> q;
        q.push(root);
        /* Create the root node from the first value and push it into the queue. */

        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            /* Process nodes one by one from the queue. */

            // Process left child
            if (getline(s, str, ',')) {  
                /* Read the next value for the left child. */
                if (str == "#")
                    node->left = NULL;  
                    /* If it's "#", set left child as NULL. */
                else {
                    TreeNode* leftNode = new TreeNode(stoi(str));
                    node->left = leftNode;
                    q.push(leftNode);
                    /* Otherwise, create a left child node and push it into the queue. */
                }
            }

            // Process right child
            if (getline(s, str, ',')) {  
                /* Read the next value for the right child. */
                if (str == "#")
                    node->right = NULL;  
                    /* If it's "#", set right child as NULL. */
                else {
                    TreeNode* rightNode = new TreeNode(stoi(str));
                    node->right = rightNode;
                    q.push(rightNode);
                    /* Otherwise, create a right child node and push it into the queue. */
                }
            }
        }
        return root;  
        /* Return the deserialized tree root. */
    }
};
