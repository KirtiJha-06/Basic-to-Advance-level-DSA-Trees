TC: O(N)
SC: O(N)
vector<int> topView(Node *root)
{
    vector<int> ans;       // Stores the final top view result
    if (root == NULL) {    // Edge case: If tree is empty
        return ans;
    }

    map<int, int> mp;      // Stores the first node at each horizontal distance
    queue<pair<Node*, int>> q;  // BFS queue storing {node, horizontal distance}
    q.push({root, 0});     // Start from root with horizontal distance 0

    while (!q.empty()) {
        auto it = q.front();
        q.pop();
        Node* node = it.first;
        int line = it.second;  // Current horizontal distance

        // Insert in map only if it is the first node at this horizontal distance
        if (mp.find(line) == mp.end()) {
            mp[line] = node->data;
        }

        // Process left and right children with updated horizontal distances
        if (node->left != NULL) {
            q.push({node->left, line - 1});
        }
        if (node->right != NULL) {
            q.push({node->right, line + 1});
        }
    }

    // Extract the top view from the map (sorted by horizontal distance)
    for (auto it : mp) {
        ans.push_back(it.second);
    }
    
    return ans;
}
