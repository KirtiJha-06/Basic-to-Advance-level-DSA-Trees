TC: O(N)
SC: O(N)

#include <bits/stdc++.h>
using namespace std;

// Definition for a binary tree node
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) { // Constructor to initialize node
        data = val;
        left = right = nullptr;
    }
};

class Solution {
public:
    // ðŸ”¥ Function to calculate the maximum distance (time) required to burn the tree
    int maxDistance(map<Node*, Node*>& mpp, Node* target) {
        queue<Node*> q;      // Queue for BFS traversal
        q.push(target);      // Start burning from the target node
        map<Node*, int> vis; // Visited map to track burned nodes
        vis[target] = 1;     // Mark target as burned
        int maxi = 0;        // Stores the maximum time taken

        while (!q.empty()) {   // BFS traversal
            int sz = q.size(); // Number of nodes at current level
            int fl = 0;        // Flag to check if fire spreads further

            for (int i = 0; i < sz; i++) { // Process all nodes at current level
                auto node = q.front();
                q.pop();

                // ðŸ”¥ Spread fire to left child if not visited
                if (node->left && !vis[node->left]) {
                    fl = 1;
                    vis[node->left] = 1;
                    q.push(node->left);
                }

                // ðŸ”¥ Spread fire to right child if not visited
                if (node->right && !vis[node->right]) {
                    fl = 1;
                    vis[node->right] = 1;
                    q.push(node->right);
                }

                // ðŸ”¥ Spread fire to parent if exists and not visited
                if (mpp.find(node) != mpp.end() && !vis[mpp[node]]) {
                    fl = 1;
                    vis[mpp[node]] = 1;
                    q.push(mpp[node]);
                }
            }

            if (fl) maxi++; // Increment time if fire spreads further
        }
        return maxi; // Returns the total time taken to burn the tree
    }

    // ðŸ”„ Function to map each node to its parent & find target node
    Node* bfttomapParent(Node* root, map<Node*, Node*>& mpp, int start) {
        if (!root) return nullptr; // Edge case: If root is null, return null

        queue<Node*> q;
        q.push(root);
        Node* res = nullptr; // Stores the target node reference

        while (!q.empty()) {
            Node* node = q.front();
            q.pop();
            if (node->data == start) res = node; // Find target node

            // ðŸ”— Store parent mapping for left child
            if (node->left) {
                mpp[node->left] = node;
                q.push(node->left);
            }

            // ðŸ”— Store parent mapping for right child
            if (node->right) {
                mpp[node->right] = node;
                q.push(node->right);
            }
        }
        return res; // Returns the target node
    }

    // ðŸ•’ Function to calculate the minimum time required to burn the entire tree
    int minTime(Node* root, int start) {
        map<Node*, Node*> mpp;  // Map to store parent-child relationships
        Node* target = bfttomapParent(root, mpp, start); // Find target node & map parents
        if (!target) return 0;  // If target is not found, return 0
        return maxDistance(mpp, target); // Compute max burning time from target
    }
};
